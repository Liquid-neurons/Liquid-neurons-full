[{"/Users/casarulez/Projects/Image-tagging/yolo-cv2/Liquid-neurons-full/fontend/src/components/header.jsx":"1","/Users/casarulez/Projects/Image-tagging/yolo-cv2/Liquid-neurons-full/fontend/src/components/gallery.jsx":"2","/Users/casarulez/Projects/Image-tagging/yolo-cv2/Liquid-neurons-full/fontend/src/components/navigation.jsx":"3"},{"size":743,"mtime":1707803932841,"results":"4","hashOfConfig":"5"},{"size":4836,"mtime":1707821573819,"results":"6","hashOfConfig":"5"},{"size":2163,"mtime":1707114545363,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ly6ztj",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"/Users/casarulez/Projects/Image-tagging/yolo-cv2/Liquid-neurons-full/fontend/src/components/header.jsx",[],[],"/Users/casarulez/Projects/Image-tagging/yolo-cv2/Liquid-neurons-full/fontend/src/components/gallery.jsx",["20"],[],"import React, { useRef, useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport anno from '../annotated_image.jpg';\n\n\nexport const Gallery = (props) => {\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [capturedImage, setCapturedImage] = useState(null);\n  const [annotatedImage, setAnnotatedImage] = useState(null);\n  const [count, setCount] = useState(null);\n  const [isCameraStarted, setIsCameraStarted] = useState(false);\n  const fileInputRef = useRef(null);\n\n\n  const toggleCamera = () => {\n    if (!isCameraStarted) {\n      startCamera();\n    } else {\n      takePicture();\n    }\n  };\n\n  const startCamera = () => {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        videoRef.current.srcObject = stream;\n        setIsCameraStarted(true);\n      })\n      .catch((err) => console.error('Error accessing the camera:', err));\n  };\n\n  const takePicture = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const video = videoRef.current;\n\n    // Set canvas dimensions to match video dimensions\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw the current frame of the video onto the canvas\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert canvas image to base64 data URL\n    const image = canvas.toDataURL('image/jpeg');\n\n    // Set the captured image in state\n    setCapturedImage(image);\n\n    // Call the function to send the image to the backend\n    sendImageToBackend(image);\n  };\n\n  const uploadPicture = (uploadedImageFile) => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const image = new Image();\n\n    // Load the uploaded image file into an image object\n    image.onload = function() {\n        // Set canvas dimensions to match image dimensions\n        canvas.width = image.width;\n        canvas.height = image.height;\n\n        // Draw the uploaded image onto the canvas\n        context.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n        // Convert canvas image to base64 data URL\n        const imageData = canvas.toDataURL('image/jpeg');\n\n        // Set the captured image in state\n        setCapturedImage(imageData);\n\n        // Call the function to send the image to the backend\n        sendImageToBackend(imageData);\n    };\n\n    // Set the source of the image object to the uploaded image file\n    image.src = URL.createObjectURL(uploadedImageFile);\n};\n\nconst handleUpload = (event) => {\n  const uploadedImageFile = event.target.files[0];\n  if (uploadedImageFile) {\n      uploadPicture(uploadedImageFile);\n  }\n};\n\nconst handleButtonClick = () => {\n  // Trigger click event on the hidden file input element\n  fileInputRef.current.click();\n};\n\n  const sendImageToBackend = async (image) => {\n    try {\n      // Send the base64 URL to the backend\n      const response = await axios.post('http://127.0.0.1:5000/upload', { image: image }, { mode: 'no-cors' });\n      console.log('Image sent to the backend successfully:', response.data);\n\n      // Set the annotated image URL in state\n      setAnnotatedImage(response.data.annotatedImagePath);\n      setCount(response.data.count);\n      \n      // console.log(\"Annotated Image:\",annotatedImage);\n      // console.log(\"Count:\", count);\n\n    } catch (error) {\n      console.error('Error sending image to the backend:', error);\n      // Optionally, handle the error\n    }\n  };\n\n\n  \n  return (\n    <div id=\"portfolio\" className=\"text-center\">\n      <div className=\"container\">\n        <div className=\"section-title\">\n          <h2>Demo</h2>\n          <p>Industrial pipe counting using AI for inventory and invoice.</p>\n        </div>\n        <div className=\"row\">\n          <div className=\"demo\">\n            <video ref={videoRef} autoPlay />\n            <canvas ref={canvasRef} width={640} height={480} style={{ display: \"none\" }} />\n          </div>\n          <button onClick={toggleCamera}>{isCameraStarted ? \"Capture Image\" : \"Start Camera\"}</button>\n          <button onClick={handleButtonClick}>Upload Image</button>\n            <input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleUpload}\n                style={{ display: 'none' }}\n                ref={fileInputRef}\n            />\n        </div>\n        {capturedImage && (\n          <div>\n            <h3>Captured Image</h3>\n            <img style={{ width: '640', height: '480' }} src={capturedImage} alt=\"Captured\" />\n          </div>\n        )}\n        {annotatedImage && (\n          <div>\n            <h3>Annotated image</h3>\n            <img style={{ width: '640', height: '480' }} src={anno} alt=\"Annotated\" />\n            <p><h1>Pipe count: {count}</h1></p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","/Users/casarulez/Projects/Image-tagging/yolo-cv2/Liquid-neurons-full/fontend/src/components/navigation.jsx",["21"],[],"import React from \"react\";\nimport logo from './logo.png';\n\n\n\nexport const Navigation = (props) => {\n  return (\n    <nav id=\"menu\" className=\"navbar navbar-default navbar-fixed-top\">\n      <div className=\"container\">\n        <div className=\"navbar-header\">\n          <button\n            type=\"button\"\n            className=\"navbar-toggle collapsed\"\n            data-toggle=\"collapse\"\n            data-target=\"#bs-example-navbar-collapse-1\"\n          >\n            {\" \"}\n            <span className=\"sr-only\">Toggle navigation</span>{\" \"}\n            <span className=\"icon-bar\"></span>{\" \"}\n            <span className=\"icon-bar\"></span>{\" \"}\n            <span className=\"icon-bar\"></span>{\" \"}\n          </button>\n          <a className=\"navbar-brand page-scroll\" href=\"#page-top\">\n            Liquid Neurons Pvt Ltd\n            <center><img height=\"110\" style={{marginTop:\"-22%\", marginLeft:\"-125%\"}} src={logo}></img></center>\n          </a>    \n        </div>\n        <div\n          className=\"collapse navbar-collapse\"\n          id=\"bs-example-navbar-collapse-1\"\n        >\n          <ul className=\"nav navbar-nav navbar-right\">\n          <li>\n              <a href=\"#about\" className=\"page-scroll\">\n                About\n              </a>\n            </li>\n            <li>\n              <a href=\"#features\" className=\"page-scroll\">\n                Features\n              </a>\n            </li>\n            <li>\n              <a href=\"#services\" className=\"page-scroll\">\n                Services\n              </a>\n            </li>\n            <li>\n              <a href=\"#portfolio\" className=\"page-scroll\">\n                Demo\n              </a>\n            </li>\n            {/* <li>\n              <a href=\"#testimonials\" className=\"page-scroll\">\n                Testimonials\n              </a>\n            </li> */}\n            {/* <li>\n              <a href=\"#team\" className=\"page-scroll\">\n                Team\n              </a>\n            </li> */}\n            <li>\n              <a href=\"#contact\" className=\"page-scroll\">\n                Contact\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n",[],{"ruleId":"22","severity":1,"message":"23","line":1,"column":35,"nodeType":"24","messageId":"25","endLine":1,"endColumn":44},{"ruleId":"26","severity":1,"message":"27","line":25,"column":21,"nodeType":"28","endLine":25,"endColumn":97},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]